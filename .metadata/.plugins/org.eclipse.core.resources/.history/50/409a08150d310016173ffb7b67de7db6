package br.com.brq.financialhealth.persistence;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import br.com.brq.financialhealth.entities.DespesaVariavel;
import br.com.brq.financialhealth.persistence.generics.DAOGeneric;
import br.com.brq.financialhealth.util.HibernateUtil;

	/**
	 * Classe DAO - DAODespesaVariavel.class
	 * 
	 * Classe para comunicacao com o banco de dados - com as informações de Despesa Variavel
	 * 
	 * 
	 *@author Hiro
	 *@version 1.0
	 *@since Treinamento BRQ/SP
	 */
	public class DAODespesaVariavel extends DAOGeneric<DespesaVariavel, Integer>{
	
	/**
	 * Construtor de classe
	 */
	public DAODespesaVariavel() {
		super(DespesaVariavel.class);
	}

	/**
	 * Metodo que procura uma Despesa Variavel, atraves de um nome
	 * 	
	 * @param nome
	 * @return - retorna o investimento com o devido nome
	 * @throws Exception
	 */
	public List<DespesaVariavel> findByNome(String nome) throws Exception{
			
			session = HibernateUtil.getSessionFactory().openSession();
			
			query = session.getNamedQuery(DespesaVariavel.FINDBY_NOME);
			query.setString("p1", "%" + nome + "%");
			
			@SuppressWarnings("unchecked")
			List<DespesaVariavel> lista = query.list();
			
			session.close();
			return lista;
			
		}
	
	/**
	 * Metodo que procura uma Despesa Variavel por data de um usuario especifico
	 * 
	 * @param dateIni - parametro passado em DATE , inicio da procura
	 * @param dateFim - parametro passado em DATE , fim da procura
	 * @param idUsuario - parametro passado em Integer do ID do usuario
	 * @return - retorna uma lista de DespesaVariavel, de um determinado usuario , em uma data estipulada
	 * @throws Exception
	 */
	public List<DespesaVariavel> findByData(Date dateIni, Date dateFim, Integer idUsuario ) throws Exception{
		
		session = HibernateUtil.getSessionFactory().openSession();
		
		query = session.getNamedQuery(DespesaVariavel.FINDBY_DATA);
		query.setDate("d1", dateIni);
		query.setDate("d2", dateFim);
		query.setInteger("usuario", idUsuario);
		
		@SuppressWarnings("unchecked")
		List<DespesaVariavel> lista = query.list();
		
		return lista;
		
	}
	
	/**
	 * Metodo que soma as despesas variaveis em um intervalo de datas de um usuario especifico
	 * 
	 * @param dateIni - parametro passado em DATE - inicio da procura para soma
	 * @param dateFim - parametro passado em DATE - fim da procura para a soma
	 * @param idUsuario - parametro passado em Integer - para identificar de qual usuario somar
	 * @return - retorna uma lista com a soma das despesas variaveis de um determinado usuario
	 * @throws Exception
	 */
	public Double somaByData(Date dateIni, Date dateFim, Integer idUsuario) throws Exception{
		
		session = HibernateUtil.getSessionFactory().openSession();
		query = session.getNamedQuery(DespesaVariavel.SOMABY_DATA);
		query.setDate("d1", dateIni);
		query.setDate("d2", dateFim);
		query.setInteger("usuario", idUsuario);
		
		Double somatorio = (Double) query.uniqueResult();
		
		return somatorio;
	}
	
	/**
	 * Sobreescrita de metodo do DAOGeneric , passando como objeto uma DespesaVariavel
	 */
	@Override
	public void delete(DespesaVariavel obj) throws Exception {
		session = HibernateUtil.getSessionFactory().openSession();
		transaction = session.beginTransaction();
		session.delete(obj);
		transaction.commit();
		session.close();
	
	}
	
	/**
	 * Sobreescrita de metodo do DAOGeneric, passando um Integer que é um id do usuario
	 */
	@Override
	public DespesaVariavel findById(Integer id) throws Exception {
		session = HibernateUtil.getSessionFactory().openSession();
		DespesaVariavel dv = (DespesaVariavel) session.get(DespesaVariavel.class, id);
		return dv;
	}
	
	
	
public static void main(String[] args) {
		
		DAODespesaVariavel dao = new DAODespesaVariavel();
		try {
			Calendar c = new GregorianCalendar(1220, 2, 1);
			Calendar c2 = new GregorianCalendar(4000, 2, 1);
			
			for(DespesaVariavel d : dao.findByData(c.getTime(), c2.getTime(), 1)){
				System.out.println(d.getNome());
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

}
